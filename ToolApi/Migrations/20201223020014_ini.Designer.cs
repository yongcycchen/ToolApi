// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolApi.Data;

namespace ToolApi.Migrations
{
    [DbContext(typeof(RoutineDbContext))]
    [Migration("20201223020014_ini")]
    partial class ini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ToolApi.Entities.Employee", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FSID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ToolApi.Entities.Tool", b =>
                {
                    b.Property<Guid>("ToolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("manualChangedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("statusChangedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ToolID");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("ToolApi.Entities.ToolNotification", b =>
                {
                    b.Property<string>("FSID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToolID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToolName")
                        .HasColumnType("TEXT");

                    b.HasKey("FSID", "ToolID");

                    b.HasIndex("ToolID");

                    b.ToTable("ToolNotifications");
                });

            modelBuilder.Entity("ToolApi.Entities.ToolOwner", b =>
                {
                    b.Property<string>("FSID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToolID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ToolName")
                        .HasColumnType("TEXT");

                    b.HasKey("FSID", "ToolID");

                    b.HasIndex("ToolID");

                    b.ToTable("ToolOwners");
                });

            modelBuilder.Entity("ToolApi.Entities.ToolNotification", b =>
                {
                    b.HasOne("ToolApi.Entities.Tool", null)
                        .WithMany("EmployeeNotificationList")
                        .HasForeignKey("ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolApi.Entities.ToolOwner", b =>
                {
                    b.HasOne("ToolApi.Entities.Tool", null)
                        .WithMany("ToolOwners")
                        .HasForeignKey("ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToolApi.Entities.Tool", b =>
                {
                    b.Navigation("EmployeeNotificationList");

                    b.Navigation("ToolOwners");
                });
#pragma warning restore 612, 618
        }
    }
}
